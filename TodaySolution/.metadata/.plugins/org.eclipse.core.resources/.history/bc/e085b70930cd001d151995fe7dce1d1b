package prac;

import java.util.LinkedList;
import java.util.Queue;

public class BFS {
	
	static int N;
	static int[][] adj;
	static boolean[] visited;
	static Queue<Integer> queue = new LinkedList<>();
	
	public static void main(String[] args) {
		adj = new int[][] 
				{{ 0, 1, 1, 0, 0, 1, 0 }, 
		         { 1, 0, 0, 1, 0, 0, 1 }, 
		         { 1, 0, 0, 1, 0, 0, 0 },
		         { 0, 1, 1, 0, 0, 0, 1 },
		         { 0, 0, 0, 0, 0, 1, 1 },
		         { 1, 0, 0, 0, 1, 0, 0 }, 
		         { 0, 1, 0, 1, 1, 0, 0 } };
		N = adj.length;
		visited = new boolean[N];
		
		
		BFS(0);
	}
	
	public static void BFS(int v) {
		queue.add(v);
		visited[v] = true;
		
		while(!queue.isEmpty()) {
			int curr = queue.poll();
			System.out.println(curr);
			
			for(int i=0; i<N; i++) {
				if(!visited[i] && adj[curr][i]==1) {
					queue.add(i);
					visited[i] = true;
				}
			}
		}
		
	}
}
